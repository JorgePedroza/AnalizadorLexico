/* Generated By:JavaCC: Do not edit this line. analizadorConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface analizadorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DEF = 3;
  /** RegularExpression Id. */
  int END = 4;
  /** RegularExpression Id. */
  int RETURN = 5;
  /** RegularExpression Id. */
  int EOL = 6;
  /** RegularExpression Id. */
  int EOLW = 7;
  /** RegularExpression Id. */
  int IF = 8;
  /** RegularExpression Id. */
  int ELSE = 9;
  /** RegularExpression Id. */
  int ELIF = 10;
  /** RegularExpression Id. */
  int BREAK = 11;
  /** RegularExpression Id. */
  int SWITCH = 12;
  /** RegularExpression Id. */
  int CASE = 13;
  /** RegularExpression Id. */
  int DEFAULT_CASE = 14;
  /** RegularExpression Id. */
  int PRINT = 15;
  /** RegularExpression Id. */
  int INPUT = 16;
  /** RegularExpression Id. */
  int IN = 17;
  /** RegularExpression Id. */
  int WHILE = 18;
  /** RegularExpression Id. */
  int FOR = 19;
  /** RegularExpression Id. */
  int CONCATENACION = 20;
  /** RegularExpression Id. */
  int PLUS_EQ = 21;
  /** RegularExpression Id. */
  int MINUS_EQ = 22;
  /** RegularExpression Id. */
  int TIMES_EQ = 23;
  /** RegularExpression Id. */
  int DIVIDE_EQ = 24;
  /** RegularExpression Id. */
  int AND = 25;
  /** RegularExpression Id. */
  int OR = 26;
  /** RegularExpression Id. */
  int NOT = 27;
  /** RegularExpression Id. */
  int EQ = 28;
  /** RegularExpression Id. */
  int TRUE = 29;
  /** RegularExpression Id. */
  int FALSE = 30;
  /** RegularExpression Id. */
  int BIG = 31;
  /** RegularExpression Id. */
  int BIGEQ = 32;
  /** RegularExpression Id. */
  int LESS = 33;
  /** RegularExpression Id. */
  int LESSEQ = 34;
  /** RegularExpression Id. */
  int NOTEQ = 35;
  /** RegularExpression Id. */
  int CHAR = 36;
  /** RegularExpression Id. */
  int IDENTIFIER = 37;
  /** RegularExpression Id. */
  int NUMBER = 38;
  /** RegularExpression Id. */
  int LPAREN = 39;
  /** RegularExpression Id. */
  int RPAREN = 40;
  /** RegularExpression Id. */
  int LBRACKET = 41;
  /** RegularExpression Id. */
  int COLON = 42;
  /** RegularExpression Id. */
  int RBRACKET = 43;
  /** RegularExpression Id. */
  int lBRACE = 44;
  /** RegularExpression Id. */
  int COMMA = 45;
  /** RegularExpression Id. */
  int DOUBLECOMMA = 46;
  /** RegularExpression Id. */
  int RBRACE = 47;
  /** RegularExpression Id. */
  int ASIGNACION = 48;
  /** RegularExpression Id. */
  int PLUS = 49;
  /** RegularExpression Id. */
  int MINUS = 50;
  /** RegularExpression Id. */
  int TIMES = 51;
  /** RegularExpression Id. */
  int DIVIDE = 52;
  /** RegularExpression Id. */
  int INCR = 53;
  /** RegularExpression Id. */
  int DECR = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"def\"",
    "\"end\"",
    "\"retrun\"",
    "\"\\n\"",
    "\"\\r\\n\"",
    "\"if\"",
    "\"else\"",
    "\"elif\"",
    "\"break\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"print\"",
    "\"input\"",
    "\"in\"",
    "\"while\"",
    "\"for\"",
    "\"&\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"==\"",
    "\"true\"",
    "\"false\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"!=\"",
    "<CHAR>",
    "<IDENTIFIER>",
    "<NUMBER>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\":\"",
    "\"]\"",
    "\"{\"",
    "\",\"",
    "\"\\\"\"",
    "\"}\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"++\"",
    "\"--\"",
  };

}
