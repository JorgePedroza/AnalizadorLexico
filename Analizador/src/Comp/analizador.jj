options {
	LOOKAHEAD = 4;
    STATIC = false;
}
PARSER_BEGIN(analizador)

package Comp;

import java.io.File;
import java.io.FileInputStream;

public class analizador {
    static FrmAnalisis f;

    public analizador(FrmAnalisis f){
        this.f = f;
    }

    public static void main(String[] args) throws ParseException, Exception{
	try {
	    analizador parser = new analizador(new FileInputStream(new File(args[0])));
	    parser.Input();
        f.txtCodigo.append("El analizador ha terminado sin errores");
	} catch (ParseException e) {
	    f.txtCodigo.append(e.getMessage());
        f.txtCodigo.append("Se han encontrado errores");
	}
    }
}

PARSER_END(analizador)

SKIP :
{
    " " |
    "\t"

}
TOKEN : {
    <DEF : "def">{System.out.println("Definicion de funcion -> " + image);}|
    <END : "end">{System.out.println("end -> " + image);}|
    <RETURN : "return">{{System.out.println("return -> " + image);}}|
    <EOL : "\n">|
    <EOLW: "\r\n">
}
//Sentencias
TOKEN : {
    <IF : "if">{f.txtCodigo.append("if -> " + image + System.lineSeparator());}|
    <ELSE : "else">{f.txtCodigo.append("else -> " + image + System.lineSeparator()); }|
    <ELIF : "elif">{f.txtCodigo.append("else if ->" + image + System.lineSeparator()); }|
    <BREAK : "break">{f.txtCodigo.append("break -> " + image + System.lineSeparator());}|
    <SWITCH : "switch">{f.txtCodigo.append("switch -> " + image + System.lineSeparator());}|
    <CASE : "case">{f.txtCodigo.append("case -> " + image + System.lineSeparator());}|
    <DEFAULT_CASE : "default">{f.txtCodigo.append("default -> " + image + System.lineSeparator());}|
    <PRINT : "print">{f.txtCodigo.append("print -> " + image + System.lineSeparator());}|
    <INPUT : "input">{f.txtCodigo.append("input -> " + image + System.lineSeparator());}|
    <IN : "in">{f.txtCodigo.append("in -> " + image + System.lineSeparator());}
}
//Ciclos
TOKEN : {
    <WHILE : "while">{f.txtCodigo.append("while -> " + image + System.lineSeparator());}|
    <FOR : "for">{f.txtCodigo.append("for -> " + image + System.lineSeparator());}
}
//Operadores
TOKEN : {
    <CONCATENACION : "&">{f.txtCodigo.append("Concatenacion -> " + image + System.lineSeparator());}|
    <PLUS_EQ : "+=">{f.txtCodigo.append("Plus equal -> " + image + System.lineSeparator());}|
    <MINUS_EQ : "-=">{f.txtCodigo.append("Minus equal -> " + image + System.lineSeparator());}|
    <TIMES_EQ : "*=">{f.txtCodigo.append("Times equal -> " + image + System.lineSeparator());}|
    <DIVIDE_EQ : "/=">{f.txtCodigo.append("Divide equal -> " + image + System.lineSeparator());}| 
    <AND : "and">{f.txtCodigo.append("and -> " + image + System.lineSeparator());}|
    <OR : "or">{f.txtCodigo.append("or -> " + image + System.lineSeparator());}|
    <NOT : "not">{f.txtCodigo.append("not -> " + image + System.lineSeparator());}|
    <EQ : "==">{f.txtCodigo.append("Equal -> " + image + System.lineSeparator());}|
    <TRUE : "true">{f.txtCodigo.append("Boolean -> " + image + System.lineSeparator());}|
    <FALSE : "false">{f.txtCodigo.append("Boolean -> " + image + System.lineSeparator());}|
    <BIG : ">">{f.txtCodigo.append("Biggest -> " + image + System.lineSeparator());}|
    <BIGEQ : ">=">{f.txtCodigo.append("Biggest equal -> " + image + System.lineSeparator());}|
    <LESS : "<">{f.txtCodigo.append("Minus -> " + image + System.lineSeparator());}|
    <LESSEQ : "<=">{f.txtCodigo.append("Minus equal -> " + image + System.lineSeparator());}|
    <NOTEQ : "!=">{f.txtCodigo.append("Not equal -> " + image + System.lineSeparator());}
}
//Caracteres
TOKEN : {
    <#CHAR : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_",":","=","#"])*>|
    <IDENTIFIER : (<CHAR>)+>|
    <NUMBER : (["0"-"9"])+|(["0"-"9"])+"."(["0"-"9"])+|(["0"-"9"])+"."|"."(["0"-"9"])+>{f.txtCodigo.append("Number -> " + image + System.lineSeparator());}
    
}
//Simbolos
TOKEN : {
    <LPAREN : "(">{f.txtCodigo.append("Left paren -> " + image + System.lineSeparator());}|
    <RPAREN : ")">{f.txtCodigo.append("Right paren -> " + image + System.lineSeparator());}|
    <LBRACKET : "[">{f.txtCodigo.append("Left bracket -> " + image + System.lineSeparator());}|
    <COLON : ":">{f.txtCodigo.append("Double colon -> " + image + System.lineSeparator());}|
    <RBRACKET : "]">{f.txtCodigo.append("Right bracket -> " + image + System.lineSeparator());}|
    <lBRACE : "{">{f.txtCodigo.append("Left brace -> " + image + System.lineSeparator());}|
    <COMMA : ",">{f.txtCodigo.append("Comma -> " + image + System.lineSeparator());}|
    <DOUBLECOMMA: "\"">{f.txtCodigo.append("Double comma -> " + image + System.lineSeparator());}| 
    <RBRACE : "}">{f.txtCodigo.append("Right brace -> " + image + System.lineSeparator());}
}
//operadores aritmeticos
TOKEN : {
    <ASIGNACION : "=">{f.txtCodigo.append("Asignacion -> " + image + System.lineSeparator());}|
    <PLUS : "+">{f.txtCodigo.append("Plus -> " + image + System.lineSeparator());}|
    <MINUS : "-">{f.txtCodigo.append("Minus -> " + image + System.lineSeparator());}|
    <TIMES : "*">{f.txtCodigo.append("Times -> " + image + System.lineSeparator());}|
    <DIVIDE : "/">{f.txtCodigo.append("Divide -> " + image + System.lineSeparator());}|
    <INCR : "++">{f.txtCodigo.append("Increment -> " + image + System.lineSeparator());}|
    <DECR : "--">{f.txtCodigo.append("Decrement -> " + image + System.lineSeparator());}
}
void Input() :
{Token t;}
{
        (
            <DEF>(t = <IDENTIFIER>{f.txtCodigo.append("Nombre de funcion -> " + t.image + System.lineSeparator());})[<LPAREN>Args()]<COLON>(<EOL>|<EOLW>)
            Code()
            [Return()]
            <END>[(<EOL>|<EOLW>)+]
        )+
        <EOF>
     
}
void Args() :
{}
{
    <IDENTIFIER>[(<COMMA><IDENTIFIER>)+]<RPAREN>
}
void Print() :
{   
}
{
    <PRINT><LPAREN>Imprimible()[<CONCATENACION>Imprimible()]<RPAREN>(<EOL>|<EOLW>)
}

void Imprimible() :
{
}
{
    <IDENTIFIER>|<DOUBLECOMMA>(<IDENTIFIER>)*<DOUBLECOMMA>
}


void Code() :
{}
{
    (
    variableArray()|
    VariableNormal()|
    VariableOperacion()|
    VariableTexto()|
    VariableEntrada()|
    Sentencias()
    )+
}
void VariableNormal() :
{Token t;}
{   
    //suma = 13 o suma = numero
    t = <IDENTIFIER>{f.txtCodigo.append("Variable -> " + t.image);}<ASIGNACION>(<NUMBER>|<IDENTIFIER>)(<EOL>|<EOLW>)
}
void VariableOperacion() :
{Token t;}
{
    //suma = a + b 
    t = <IDENTIFIER>{f.txtCodigo.append("Variable -> " + t.image);}
    <ASIGNACION>
    operacion()
    (<EOL>|<EOLW>)
}
void VariableTexto() :
{Token t;}
{
    //palabra = "texto"
    t = <IDENTIFIER>{f.txtCodigo.append("Variable -> " + t.image);}<ASIGNACION><DOUBLECOMMA>(t = <IDENTIFIER>{f.txtCodigo.append("Cadena de texto -> " + t.image);}|<NUMBER>)*<DOUBLECOMMA>(<EOL>|<EOLW>)
}
void VariableEntrada() :
{}
{
    <IDENTIFIER><ASIGNACION>Entrada()
}
void variableArray() :
{}
{
    //array = [1,2,3,4,5]
   (<IDENTIFIER><ASIGNACION><LBRACKET>((<NUMBER>|<IDENTIFIER>|<TRUE>|<FALSE>)((<COMMA><NUMBER>)|(<COMMA><IDENTIFIER>)|(<COMMA><TRUE>)|(<COMMA><FALSE>))*<RBRACKET>(<EOL>|<EOLW>)))|
   //array[0] = 1
   (<IDENTIFIER><LBRACKET>(<NUMBER>|<IDENTIFIER>)<RBRACKET>(<ASIGNACION>(<NUMBER>|<IDENTIFIER>|<TRUE>|<FALSE>)(<EOL>|<EOLW>)|(<EOL>|<EOLW>)))
}

void Entrada() :
{}
{
    <INPUT><LPAREN>[<DOUBLECOMMA>(<IDENTIFIER>)+<DOUBLECOMMA>]<RPAREN>(<EOL>|<EOLW>)
}
void Sentencias() :
{}
{
    (
        Entrada()|
        SentenciaIf()|
        SentenciaFor()|
        //SentenciaWhile()|
        SentenciaSwitch()|
        Print()
    )+
}
void SentenciaIf() :
{}
{
    <IF>Comparacion()(<EOL>|<EOLW>)
        Code()
    [Else()|Elif()]
    <END>(<EOL>|<EOLW>)
}
void Comparacion() : 
{}
{
    //if true
    (<TRUE>|<FALSE>)<COLON>|
    //if a < b || if a < 3 || 3 > a
    ((<NUMBER>)|<TRUE>|<FALSE>|<IDENTIFIER>)(<LESS>|<LESSEQ>|<BIG>|<BIGEQ>|<NOT>|<EQ>)(<TRUE>|<FALSE>|<IDENTIFIER>|<NUMBER>)<COLON>|
    //if a not b or a < b
    (((<NUMBER>)+|<TRUE>|<FALSE>|<IDENTIFIER>)(<LESS>|<LESSEQ>|<BIG>|<BIGEQ>|<NOT>)((<NUMBER>)+|<TRUE>|<FALSE>|<IDENTIFIER>)[(<OR>|<AND>)])+<COLON>
}
void Else() :
{}
{
    <ELSE><COLON>(<EOL>|<EOLW>)
        Code()
}

void Elif() :
{}
{
    (
    <ELIF>Comparacion()(<EOL>|<EOLW>)
        Code()
    )+
    [Else()]
}
//Sintaxis de la sentencia del metodo Switch
void SentenciaSwitch() :
{}
{
    <SWITCH><LPAREN><IDENTIFIER><RPAREN><COLON>(<EOL>|<EOLW>)
    (<CASE>(<IDENTIFIER>|<NUMBER>)<COLON>(<EOL>|<EOLW>)
    Code()<BREAK>(<EOL>|<EOLW>))+
    ((<DEFAULT_CASE><COLON>(<EOL>|<EOLW>)Code()<BREAK>(<EOL>|<EOLW>)<END>(<EOL>|<EOLW>))|<END>(<EOL>|<EOLW>))
}
void Return() :
{}
{   
    //return variable
    <RETURN>(<NUMBER>|<IDENTIFIER>)(<EOL>|<EOLW>)|
    //return "texto"
    <RETURN><DOUBLECOMMA>(<IDENTIFIER>|<NUMBER>)*<DOUBLECOMMA>(<EOL>|<EOLW>)|
    //return 3 + 1 / 5
    <RETURN>(<NUMBER>|<IDENTIFIER>)((<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)(<NUMBER>|<IDENTIFIER>))+(<EOL>|<EOLW>)|
    //return (3+1) * var || var*(3+1)/4+(3+1)
    <RETURN>operacion()(<EOL>|<EOLW>)|
    //return isOdd(number)
    <RETURN><IDENTIFIER><LPAREN><IDENTIFIER><RPAREN>(<EOL>|<EOLW>)
}
void operacion() :
{}
{
    <LPAREN>(<NUMBER>|<IDENTIFIER>)(<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)(<NUMBER>|<IDENTIFIER>)<RPAREN>[(<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)operacion()]|
    (<NUMBER>|<IDENTIFIER>)(<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)(<NUMBER>|<IDENTIFIER>|operacion())[((<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)operacion())+]|
    <LPAREN>(<NUMBER>|<IDENTIFIER>)(<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)(<NUMBER>|<IDENTIFIER>|operacion())[((<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)operacion())+]<RPAREN>|
    (<NUMBER>|<IDENTIFIER>)
    
}
void SentenciaFor() :
{}
{
        //for i | for numero in [0 1 2 3 4] | in ("hola") | in ["mike jorge 29"]
	<FOR><IDENTIFIER><IN>(<LPAREN>|<LBRACKET>)([<DOUBLECOMMA>](<IDENTIFIER>)*[<DOUBLECOMMA>]|(<NUMBER>)*)(<RPAREN>|<RBRACKET>)<COLON>(<EOL>|<EOLW>)
        Code()
    <END>(<EOL>|<EOLW>)
}