options {
	LOOKAHEAD = 4;
    STATIC = false;
}
PARSER_BEGIN(analizador)

package Comp;

import java.io.File;
import java.io.FileInputStream;
import java.io.ByteArrayInputStream;
import static Comp.analizador.f;


public class analizador {
    static FrmAnalisis f;

    public analizador(FrmAnalisis f){
        this.f = f;
    }

    public static void main(String[] args) throws ParseException, Exception{
	try {
	    analizador parser = new analizador(new FileInputStream(new File(args[0])));
	    parser.Input();
            f.lbAnalisis.setText("El analizador ha terminado sin errores");
            System.out.println("Chido je");
	} catch (ParseException e) {
            System.out.println("Error je");
	    f.txtCodigo.append(e.getMessage());
            f.lbAnalisis.setText("Se han encontrado errores");
	}
    }
}

PARSER_END(analizador)

SKIP :
{
    " " |
    "\t"

}


TOKEN : {<DEF : "def">{f.txtCodigo.append("funcion -> " + image + System.lineSeparator());}}
TOKEN : {<END : "end">{f.txtCodigo.append("end -> " + image + System.lineSeparator());}}
TOKEN : {<RETURN : "return">{f.txtCodigo.append("return -> " + image + System.lineSeparator());}}
TOKEN : {<EOL : "\n">}
TOKEN : {<EOLW: "\r\n">}

//Sentencias
TOKEN : {<IF : "if">{f.txtCodigo.append("if -> " + image + System.lineSeparator());}}
TOKEN : {<ELSE : "else">{f.txtCodigo.append("else -> " + image + System.lineSeparator()); }}
TOKEN : {<ELIF : "elif">{f.txtCodigo.append("else if ->" + image + System.lineSeparator()); }}
TOKEN : {<BREAK : "break">{f.txtCodigo.append("break -> " + image + System.lineSeparator());}}
TOKEN : {<SWITCH : "switch">{f.txtCodigo.append("switch -> " + image + System.lineSeparator());}}
TOKEN : {<CASE : "case">{f.txtCodigo.append("case -> " + image + System.lineSeparator());}}
TOKEN : {<DEFAULT_CASE : "default">{f.txtCodigo.append("default -> " + image + System.lineSeparator());}}
TOKEN : {<PRINT : "print">{f.txtCodigo.append("print -> " + image + System.lineSeparator());}}
TOKEN : {<INPUT : "input">{f.txtCodigo.append("input -> " + image + System.lineSeparator());}}
TOKEN : {<IN : "in">{f.txtCodigo.append("in -> " + image + System.lineSeparator());}}

//Ciclos
TOKEN : {<WHILE : "while">{f.txtCodigo.append("while -> " + image + System.lineSeparator());}}
TOKEN : {<FOR : "for">{f.txtCodigo.append("for -> " + image + System.lineSeparator());}}
//Operadores
TOKEN : {<CONCATENACION : "&">{f.txtCodigo.append("Concatenacion -> " + image + System.lineSeparator());}}
TOKEN : {<PLUS_EQ : "+=">{f.txtCodigo.append("Plus equal -> " + image + System.lineSeparator());}}
TOKEN : {<MINUS_EQ : "-=">{f.txtCodigo.append("Minus equal -> " + image + System.lineSeparator());}}
TOKEN : {<TIMES_EQ : "*=">{f.txtCodigo.append("Times equal -> " + image + System.lineSeparator());}}
TOKEN : {<DIVIDE_EQ : "/=">{f.txtCodigo.append("Divide equal -> " + image + System.lineSeparator());}}
TOKEN : {<AND : "and">{f.txtCodigo.append("and -> " + image + System.lineSeparator());}}
TOKEN : {<OR : "or">{f.txtCodigo.append("or -> " + image + System.lineSeparator());}}
TOKEN : {<NOT : "not">{f.txtCodigo.append("not -> " + image + System.lineSeparator());}}
TOKEN : {<EQ : "==">{f.txtCodigo.append("Equal -> " + image + System.lineSeparator());}}
TOKEN : {<TRUE : "true">{f.txtCodigo.append("Boolean -> " + image + System.lineSeparator());}}
TOKEN : {<FALSE : "false">{f.txtCodigo.append("Boolean -> " + image + System.lineSeparator());}}
TOKEN : {<BIG : ">">{f.txtCodigo.append("Biggest -> " + image + System.lineSeparator());}}
TOKEN : {<BIGEQ : ">=">{f.txtCodigo.append("Biggest equal -> " + image + System.lineSeparator());}}
TOKEN : {<LESS : "<">{f.txtCodigo.append("Minus -> " + image + System.lineSeparator());}}
TOKEN : {<LESSEQ : "<=">{f.txtCodigo.append("Minus equal -> " + image + System.lineSeparator());}}
TOKEN : {<NOTEQ : "!=">{f.txtCodigo.append("Not equal -> " + image + System.lineSeparator());}}
//Simbolos
TOKEN : {<LPAREN : "(">{f.txtCodigo.append("Left paren -> " + image + System.lineSeparator());}}
TOKEN : {<RPAREN : ")">{f.txtCodigo.append("Right paren -> " + image + System.lineSeparator());}}
TOKEN : {<LBRACKET : "[">{f.txtCodigo.append("Left bracket -> " + image + System.lineSeparator());}}
TOKEN : {<COLON : ":">{f.txtCodigo.append("Double colon -> " + image + System.lineSeparator());}}
TOKEN : {<RBRACKET : "]">{f.txtCodigo.append("Right bracket -> " + image + System.lineSeparator());}}
TOKEN : {<COMMA : ",">{f.txtCodigo.append("Comma -> " + image + System.lineSeparator());}}
TOKEN : {<DOUBLECOMMA: "\"">{f.txtCodigo.append("Double comma -> " + image + System.lineSeparator());}}
//operadores aritmeticos
TOKEN : {<ASIGNACION : "=">{f.txtCodigo.append("Asignacion -> " + image + System.lineSeparator());}}
TOKEN : {<PLUS : "+">{f.txtCodigo.append("Plus -> " + image + System.lineSeparator());}}
TOKEN : {<MINUS : "-">{f.txtCodigo.append("Minus -> " + image + System.lineSeparator());}}
TOKEN : {<TIMES : "*">{f.txtCodigo.append("Times -> " + image + System.lineSeparator());}}
TOKEN : {<DIVIDE : "/">{f.txtCodigo.append("Divide -> " + image + System.lineSeparator());}}
TOKEN : {<INCR : "++">{f.txtCodigo.append("Increment -> " + image + System.lineSeparator());}}
TOKEN : {<DECR : "--">{f.txtCodigo.append("Decrement -> " + image + System.lineSeparator());}}
//Caracteres
TOKEN : {
    <#CHAR : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_",":","#","?",",", "+", "-", "*", "/"])*>|
    <NUMBER : (["0"-"9"])+|(["0"-"9"])+"."(["0"-"9"])+>{f.txtCodigo.append("Number -> " + image + System.lineSeparator());}|
    <IDENTIFIER : (<CHAR>|<NUMBER>)+>
    
}
void Input() :
{Token t;}
{
        ((
            <DEF>(t = <IDENTIFIER>{f.txtCodigo.append("Nombre de funcion -> " + t.image + System.lineSeparator());})[<LPAREN>Args()]<COLON>(<EOL>|<EOLW>)
            [Code()]
            [Return()]
            <END>[(<EOL>|<EOLW>)+]
        )+|
        Code())+
        <EOF>
     
}
void Args() :
{Token t;}
{
    (t = <IDENTIFIER>{f.txtCodigo.append("Parametro -> " + t.image + System.lineSeparator());}|<NUMBER>)
    [(<COMMA>(t = <IDENTIFIER>{f.txtCodigo.append("Parametro -> " + t.image + System.lineSeparator());}|<NUMBER>))+]<RPAREN>
}
void Print() :
{   
}
{
    <PRINT><LPAREN>Imprimible()[(<CONCATENACION>Imprimible())+]<RPAREN>(<EOL>|<EOLW>)
}
void AuxPrint() :
{}
{
    <PLUS>|
    <MINUS>|
    <TIMES>|
    <DIVIDE>|
    "="|
    <TRUE>|
    <FALSE>
}
void Imprimible() :
{Token t;}
{
    (t = <IDENTIFIER>{f.txtCodigo.append("Variable -> " + t.image + System.lineSeparator());})[<LBRACKET>(<IDENTIFIER>|<NUMBER>)<RBRACKET>]
    |<TRUE>|<FALSE>|<NUMBER>|
    <DOUBLECOMMA>(t = <IDENTIFIER>{f.txtCodigo.append("Texto -> " + t.image + System.lineSeparator());}|AuxPrint()|operacion()|<NUMBER>)*<DOUBLECOMMA>
}


void Code() :
{}
{
    (
    VariableBooleana()|
    variableArray()|
    VariableNormal()|
    VariableOperacion()|
    VariableTexto()|
    VariableEntrada()|
    VariableFuncion()|
    Sentencias()
    )+
}
void VariableBooleana() :
{Token t;}
{
    t = <IDENTIFIER>{f.txtCodigo.append("Variable -> " + t.image + System.lineSeparator());}<ASIGNACION>(<TRUE>|<FALSE>)(<EOL>|<EOLW>) 
}
void VariableNormal() :
{Token t;}
{   
    //suma = 13 o suma += numero
    t = <IDENTIFIER>{f.txtCodigo.append("Variable -> " + t.image + System.lineSeparator());}(<ASIGNACION>|<PLUS_EQ>|<MINUS_EQ>|<TIMES_EQ>|<DIVIDE_EQ>)(<NUMBER>|<IDENTIFIER>)(<EOL>|<EOLW>)
}
void VariableOperacion() :
{Token t;}
{
    //suma = a + b 
    t = <IDENTIFIER>{f.txtCodigo.append("Variable -> " + t.image + System.lineSeparator());}
    (<ASIGNACION>|<PLUS_EQ>|<MINUS_EQ>|<TIMES_EQ>|<DIVIDE_EQ>)
    operacion()
    (<EOL>|<EOLW>)
}
void VariableTexto() :
{Token t;}
{
    //palabra = "texto"
    t = <IDENTIFIER>{f.txtCodigo.append("Variable -> " + t.image + System.lineSeparator());}(<ASIGNACION>|<PLUS_EQ>|<MINUS_EQ>)Texto()(<EOL>|<EOLW>)
}
void Texto() :
{Token t;}
{
    <DOUBLECOMMA>(t = <IDENTIFIER>{f.txtCodigo.append("Cadena de texto -> " + t.image + System.lineSeparator());}|<NUMBER>)*<DOUBLECOMMA>
}
void VariableEntrada() :
{}
{
    <IDENTIFIER><ASIGNACION>Entrada()
}
void variableArray() :
{Token t;}
{
   (t = <IDENTIFIER>{f.txtCodigo.append("Arreglo -> " + t.image + System.lineSeparator());})<ASIGNACION>
   <LBRACKET>(<NUMBER>|<IDENTIFIER>|<TRUE>|<FALSE>)[(<COMMA>(<NUMBER>|<IDENTIFIER>|<TRUE>|<FALSE>))+]<RBRACKET>(<EOL>|<EOLW>)|
   (t = <IDENTIFIER>{f.txtCodigo.append("Arreglo -> " + t.image + System.lineSeparator());})<ASIGNACION><LBRACKET><RBRACKET>(<EOL>|<EOLW>)|
   //array[0] = 1
   (t = <IDENTIFIER>{f.txtCodigo.append("Arreglo -> " + t.image + System.lineSeparator());})<LBRACKET>(<NUMBER>|<IDENTIFIER>)<RBRACKET><ASIGNACION>(<NUMBER>|<IDENTIFIER>[operacion()]|<TRUE>|<FALSE>|Texto()|operacion())(<EOL>|<EOLW>)

}
void VariableFuncion() :
{Token t;}
{
    t = <IDENTIFIER>{f.txtCodigo.append("Variable -> " + t.image + System.lineSeparator());}<ASIGNACION><IDENTIFIER><LPAREN>Args()(<EOL>|<EOLW>)
}
void Entrada() :
{Token t;}
{
    <INPUT><LPAREN>[<DOUBLECOMMA>((t = <IDENTIFIER>{f.txtCodigo.append("Texto -> " + t.image + System.lineSeparator());})|<NUMBER>)+<DOUBLECOMMA>]<RPAREN>(<EOL>|<EOLW>)
}
void Sentencias() :
{}
{
    (
        Entrada()|
        SentenciaIf()|
        SentenciaFor()|
        SentenciaWhile()|
        SentenciaSwitch()|
        Print()|
        <IDENTIFIER><INCR>(<EOL>|<EOLW>)|
        <IDENTIFIER><DECR>(<EOL>|<EOLW>)
    )+
}

void SentenciaWhile() :
{}
{
  <WHILE>Comparacion()(<EOL>|<EOLW>)
  Code()
  <END>(<EOL>|<EOLW>)

}

void SentenciaIf() :
{}
{
    <IF>Comparacion()(<EOL>|<EOLW>)
        [Code()]
    [Else()|Elif()]
    <END>(<EOL>|<EOLW>)
}
void Comparacion() : 
{}
{
    //if true
    (<TRUE>|<FALSE>|<IDENTIFIER>)<COLON>|
    //if a < b || if a < 3 || 3 > a
    (<NUMBER>|<IDENTIFIER>|Texto())(<LESS>|<LESSEQ>|<BIG>|<BIGEQ>|<EQ>)(<IDENTIFIER>|<NUMBER>|Texto())<COLON>|
    //if true == true || if not true
    (<TRUE>|<FALSE>|<IDENTIFIER>)(<EQ>|<NOT>)(<TRUE>|<FALSE>|<IDENTIFIER>)<COLON>|
    //not true || not false
    <NOT>(<TRUE>|<FALSE>)<COLON>|
    //if a not b or a < b
    ((<NUMBER>|<TRUE>|<FALSE>|<IDENTIFIER>|Texto())(<LESS>|<LESSEQ>|<BIG>|<BIGEQ>|<NOT>|<EQ>)(<NUMBER>|<TRUE>|<FALSE>|<IDENTIFIER>|Texto())[(<OR>|<AND>)])+<COLON>
}
void Else() :
{}
{
    <ELSE><COLON>(<EOL>|<EOLW>)
        [Code()]
}

void Elif() :
{}
{
    (
    <ELIF>Comparacion()(<EOL>|<EOLW>)
        [Code()]
    )+
    [Else()]
}
//Sintaxis de la sentencia del metodo Switch
void SentenciaSwitch() :
{}
{
    <SWITCH><LPAREN><IDENTIFIER><RPAREN><COLON>(<EOL>|<EOLW>)
    (<CASE>(<IDENTIFIER>|<NUMBER>)<COLON>(<EOL>|<EOLW>)
    Code()<BREAK>(<EOL>|<EOLW>))+
    ((<DEFAULT_CASE><COLON>(<EOL>|<EOLW>)Code()<BREAK>(<EOL>|<EOLW>)<END>(<EOL>|<EOLW>))|<END>(<EOL>|<EOLW>)) 
}
void Return() :
{}
{   
    //return variable
    <RETURN>(<NUMBER>|<IDENTIFIER>|<TRUE>|<FALSE>)(<EOL>|<EOLW>)|
    //return "texto"
    <RETURN><DOUBLECOMMA>(<IDENTIFIER>|<NUMBER>)*<DOUBLECOMMA>(<EOL>|<EOLW>)|
    //return 3 + 1 / 5
    <RETURN>(<NUMBER>|<IDENTIFIER>)((<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)(<NUMBER>|<IDENTIFIER>))+(<EOL>|<EOLW>)|
    //return (3+1) * var || var*(3+1)/4+(3+1)
    <RETURN>operacion()(<EOL>|<EOLW>)|
    //return isOdd(number)
    <RETURN><IDENTIFIER><LPAREN>Args()(<EOL>|<EOLW>)
}
void operacion() :
{}
{
    <LPAREN>(<NUMBER>|<IDENTIFIER>|operacion())(<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)(<NUMBER>|<IDENTIFIER>|operacion())<RPAREN>[(<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)operacion()]|
    (<NUMBER>|<IDENTIFIER>)(<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)(<NUMBER>|<IDENTIFIER>|operacion())[((<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)operacion())+]|
    <LPAREN>(<NUMBER>|<IDENTIFIER>)(<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)(<NUMBER>|<IDENTIFIER>|operacion())[((<PLUS>|<MINUS>|<TIMES>|<DIVIDE>)operacion())+]<RPAREN>|
    (<NUMBER>|<IDENTIFIER>)
}
void SentenciaFor() :
{Token t;}
{
	//for i | for numero in [0 1 2 3 4] | in "hola" | in ["mike jorge 29"]
    <FOR>(t = <IDENTIFIER>{f.txtCodigo.append("Iterador -> " + t.image + System.lineSeparator());})<IN>((<DOUBLECOMMA>(t = <IDENTIFIER>{f.txtCodigo.append("Texto -> " + t.image + System.lineSeparator());})+<DOUBLECOMMA>)|<LBRACKET>(<NUMBER>|<IDENTIFIER>|<TRUE>|<FALSE>)[(<COMMA>(<NUMBER>|<IDENTIFIER>|<TRUE>|<FALSE>))+]<RBRACKET>|<NUMBER>|<IDENTIFIER>)<COLON>(<EOL>|<EOLW>)
        Code()
    <END>(<EOL>|<EOLW>)
}